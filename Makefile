# SPDX-License-Identifier: GPL-2.0

MAKEFLAGS += -rR --no-print-directory

ifeq ("$(origin V)", "command line")
	  MBUILD_VERBOSE = $(V)
  endif
  ifndef MBUILD_VERBOSE
	  MBUILD_VERBOSE = 0
  endif

ifeq ($(MBUILD_VERBOSE),1)
	  quiet =
	    Q =
    else
	  quiet=-s
	    Q = @
    endif

ifeq ("$(origin O)", "command line")
		O_LEVEL = $(O)
	endif
	ifndef O_LEVEL
		O_LEVEL = 2
	endif

export quiet Q MBUILD_VERBOSE

TOPDIR := $(shell pwd)
export TOPDIR

offsets_h  := $(TOPDIR)/arch/arm64/include/asm/asm-offsets.h
offsets_s  := $(TOPDIR)/arch/arm64/core/asm-offsets.s
offsets_c  := $(TOPDIR)/arch/arm64/core/asm-offsets.c

CROSS_COMPILE ?= aarch64-linux-gnu-
AS		= $(CROSS_COMPILE)as
LD		= $(CROSS_COMPILE)ld
CC		= $(CROSS_COMPILE)gcc
CPP		= $(CC) -E
AR		= $(CROSS_COMPILE)ar
NM		= $(CROSS_COMPILE)nm

STRIP		= $(CROSS_COMPILE)strip
OBJCOPY		= $(CROSS_COMPILE)objcopy
OBJDUMP		= $(CROSS_COMPILE)objdump

export AS LD CC CPP AR NM
export STRIP OBJCOPY OBJDUMP

CFLAGS := -Wall -g -nostdlib -mgeneral-regs-only -nostdinc
CFLAGS += -I $(TOPDIR)/include -I $(TOPDIR)/arch/arm64/include
CFLAGS += -fno-builtin -Werror-implicit-function-declaration -std=gnu89

AFLAGS := -Wall
AFLAGS += -g -I $(TOPDIR)/arch/arm64/include -I $(TOPDIR)/include -D__ASSEMBLY__

LDFLAGS := --no-undefined

export CFLAGS LDFLAGS AFLAGS


TARGET := yios


obj-y += arch/
obj-y += init/
obj-y += lib/
obj-y += kernel/
obj-y += drivers/
obj-y += mm/

all : $(offsets_h) YIOS

YIOS:
	$(Q) make $(quiet)  -f $(TOPDIR)/scripts/Makefile.build
	$(Q) echo "  LD      $(TARGET).elf"
	$(Q) $(LD) $(LDFLAGS) -T $(TOPDIR)/arch/arm64/lds/vmyios.lds -Map system.map -o $(TOPDIR)/$(TARGET).elf built-in.o
	$(Q) echo "  OBJCOPY $(TARGET).bin"
	$(Q) $(OBJCOPY) $(TOPDIR)/$(TARGET).elf -O binary $(TARGET).bin


clean:
	$(Q) echo "  CLEAN   all .o  *.dtb built-in.o"
	$(Q) echo "  CLEAN   yios.bin yios.elf"
	$(Q) rm -f $(shell find -name "*.o")
	$(Q) rm -f $(shell find -name "*.lds")
	$(Q) rm -rf $(offsets_h)
	$(Q) rm -rf $(offsets_s)
	$(Q) rm -f $(TARGET).*

distclean:
	$(Q) echo "  CLEAN   all .o .*.d *.dtb built-in.o"
	$(Q) echo "  CLEAN   yios.bin yios.elf"
	$(Q) rm -f $(shell find -name "*.o")
	$(Q) rm -f $(shell find -name "*.lds")
	$(Q) rm -f $(shell find -name "*.d")
	$(Q) rm -rf $(offsets_h)
	$(Q) rm -rf $(offsets_s)
	$(Q) rm -f $(TARGET).*

YIOSINCLUDE := 	-I$(TOPDIR)/arch/arm64/include \
		-I$(TOPDIR)/include
export YIOSINCLUDE

define sed-y
        "/^->/{s:->#\(.*\):/* \1 */:; \
        s:^->\([^ ]*\) [\$$#]*\([-0-9]*\) \(.*\):#define \1 \2 /* \3 */:; \
        s:^->\([^ ]*\) [\$$#]*\([^ ]*\) \(.*\):#define \1 \2 /* \3 */:; \
        s:->::; p;}"
endef

define cmd_offsets
        (set -e; \
         echo "#ifndef $1"; \
         echo "#define $1"; \
         echo "/*"; \
         echo " * DO NOT MODIFY."; \
         echo " *"; \
         echo " * This file was generated by Kbuild"; \
         echo " */"; \
         echo ""; \
         sed -ne $(sed-y) $<; \
         echo ""; \
         echo "#endif" ) > $@
endef

$(offsets_s): $(offsets_c)
	$(Q) echo "  CC      arch/arm64/core/asm-offsets.c"
	$(Q) gcc $(YIOSINCLUDE) -S $< -o $@

$(offsets_h): $(offsets_s)
	$(Q) $(call cmd_offsets,__ASM_OFFSETS_H__)

QEMU_FLAGS  := -machine raspi4b
QEMU_FLAGS  += -nographic

QEMU_PATH = /work/github/qemu-9.1.0/build/
run:
	$(Q) $(QEMU_PATH)qemu-system-aarch64 $(QEMU_FLAGS) -kernel $(TARGET).bin
debug:
	$(Q) $(QEMU_PATH)qemu-system-aarch64 $(QEMU_FLAGS) -kernel $(TARGET).bin -S -gdb tcp::3333
